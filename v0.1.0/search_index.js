var documenterSearchIndex = {"docs":
[{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"using FuzzyLogic\nusing Plots","category":"page"},{"location":"api/memberships/#Membership-functions","page":"Membership functions","title":"Membership functions","text":"","category":"section"},{"location":"api/memberships/#DifferenceSigmoid-membership-function","page":"Membership functions","title":"DifferenceSigmoid membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"DifferenceSigmoidMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.DifferenceSigmoidMF","page":"Membership functions","title":"FuzzyLogic.DifferenceSigmoidMF","text":"struct DifferenceSigmoidMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nDifference of two sigmoids. See also SigmoidMF.\n\nFields\n\na1::Real: slope of the first sigmoid.\nc1::Real: center of the first sigmoid.\na2::Real: slope of the second sigmoid.\nc2::Real: center of the second sigmoid.\n\nExample\n\nmf = DifferenceSigmoidMF(5, 2, 5, 7)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(DifferenceSigmoidMF(5, 2, 5, 7), 0, 10) # hide","category":"page"},{"location":"api/memberships/#Gaussian-membership-function","page":"Membership functions","title":"Gaussian membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"GaussianMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.GaussianMF","page":"Membership functions","title":"FuzzyLogic.GaussianMF","text":"struct GaussianMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nGaussian membership function e^-frac(x-μ)²2σ².\n\nFields\n\nmu::Real: mean μ.\nsig::Real: standard deviation σ.\n\nExample\n\nmf = GaussianMF(5.0, 1.5)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(GaussianMF(5.0, 1.5), 0, 10) # hide","category":"page"},{"location":"api/memberships/#GeneralizedBell-membership-function","page":"Membership functions","title":"GeneralizedBell membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"GeneralizedBellMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.GeneralizedBellMF","page":"Membership functions","title":"FuzzyLogic.GeneralizedBellMF","text":"struct GeneralizedBellMF{T<:Real, S<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nGeneralized Bell membership function frac11+vertfracx-cavert^2b.\n\nFields\n\na::Real: Width of the curve, the bigger the wider.\nb::Real: Slope of the curve, the bigger the steeper.\nc::Real: Center of the curve.\n\nExample\n\nmf = GeneralizedBellMF(2, 4, 5)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(GeneralizedBellMF(2, 4, 5), 0, 10) # hide","category":"page"},{"location":"api/memberships/#Linear-membership-function","page":"Membership functions","title":"Linear membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"LinearMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.LinearMF","page":"Membership functions","title":"FuzzyLogic.LinearMF","text":"struct LinearMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nLinear membership function. If a  b, it is increasing (S-shaped), otherwise it is decreasing (Z-shaped).\n\nFields\n\na::Real: foot.\nb::Real: shoulder.\n\nExample\n\nmf = LinearMF(2, 8)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(LinearMF(2, 8), 0, 10) # hide","category":"page"},{"location":"api/memberships/#PiShape-membership-function","page":"Membership functions","title":"PiShape membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"PiShapeMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.PiShapeMF","page":"Membership functions","title":"FuzzyLogic.PiShapeMF","text":"struct PiShapeMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nΠ-shaped membership function.\n\nFields\n\na::Real: left foot.\nb::Real: left shoulder.\nc::Real: right shoulder.\nd::Real: right foot.\n\nExample\n\nmf = PiShapeMF(1, 4, 5, 10)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(PiShapeMF(1, 4, 5, 10), 0, 10) # hide","category":"page"},{"location":"api/memberships/#ProductSigmoid-membership-function","page":"Membership functions","title":"ProductSigmoid membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"ProductSigmoidMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.ProductSigmoidMF","page":"Membership functions","title":"FuzzyLogic.ProductSigmoidMF","text":"struct ProductSigmoidMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nProduct of two sigmoids. See also SigmoidMF.\n\nFields\n\na1::Real: slope of the first sigmoid.\nc1::Real: center of the first sigmoid.\na2::Real: slope of the second sigmoid.\nc2::Real: center of the second sigmoid.\n\nExample\n\nmf = ProductSigmoidMF(2, 3, -5, 8)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(ProductSigmoidMF(2, 3, -5, 8), 0, 10) # hide","category":"page"},{"location":"api/memberships/#SShape-membership-function","page":"Membership functions","title":"SShape membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"SShapeMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.SShapeMF","page":"Membership functions","title":"FuzzyLogic.SShapeMF","text":"struct SShapeMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nS-shaped membership function.\n\nFields\n\na::Real: foot.\nb::Real: shoulder.\n\nExample\n\nmf = SShapeMF(1, 8)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(SShapeMF(1, 8), 0, 10) # hide","category":"page"},{"location":"api/memberships/#Sigmoid-membership-function","page":"Membership functions","title":"Sigmoid membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"SigmoidMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.SigmoidMF","page":"Membership functions","title":"FuzzyLogic.SigmoidMF","text":"struct SigmoidMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nSigmoid membership function frac11+e^-a(x-c).\n\nFields\n\na::Real: parameter controlling the slope of the curve.\nc::Real: center of the slope.\n\nExample\n\nmf = SigmoidMF(2, 5)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(SigmoidMF(2, 5), 0, 10) # hide","category":"page"},{"location":"api/memberships/#Trapezoidal-membership-function","page":"Membership functions","title":"Trapezoidal membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"TrapezoidalMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.TrapezoidalMF","page":"Membership functions","title":"FuzzyLogic.TrapezoidalMF","text":"struct TrapezoidalMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nTrapezoidal membership function.\n\nFields\n\na::Real: left foot.\nb::Real: left shoulder.\nc::Real: right shoulder.\nd::Real: right foot.\n\nExample\n\nmf = TrapezoidalMF(1, 3, 7, 9)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(TrapezoidalMF(1, 3, 7, 9), 0, 10) # hide","category":"page"},{"location":"api/memberships/#Triangular-membership-function","page":"Membership functions","title":"Triangular membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"TriangularMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.TriangularMF","page":"Membership functions","title":"FuzzyLogic.TriangularMF","text":"struct TriangularMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nTriangular membership function.\n\nFields\n\na::Real: left foot.\nb::Real: peak.\nc::Real: right foot.\n\nExample\n\nmf = TriangularMF(3, 5, 7)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(TriangularMF(3, 5, 7), 0, 10) # hide","category":"page"},{"location":"api/memberships/#ZShape-membership-function","page":"Membership functions","title":"ZShape membership function","text":"","category":"section"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"ZShapeMF","category":"page"},{"location":"api/memberships/#FuzzyLogic.ZShapeMF","page":"Membership functions","title":"FuzzyLogic.ZShapeMF","text":"struct ZShapeMF{T<:Real} <: FuzzyLogic.AbstractMembershipFunction\n\nZ-shaped membership function.\n\nFields\n\na::Real: shoulder.\nb::Real: foot.\n\nExample\n\nmf = ZShapeMF(3, 7)\n\n\n\n\n\n","category":"type"},{"location":"api/memberships/","page":"Membership functions","title":"Membership functions","text":"plot(ZShapeMF(3, 7), 0, 10) # hide","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"EditURL = \"https://github.com/lucaferranti/FuzzyLogic.jl/blob/main/docs/src/literate/tutorials/sugeno.jl\"","category":"page"},{"location":"tutorials/sugeno/#Build-a-Sugeno-inference-system","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"","category":"section"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"This tutorial describes how to construct a type-1 Sugeno inference system. The reader is assumed to be familiar with the basic syntax to build a fuzzy system, which is described in the Build a Mamdani inference system tutorial.","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"tip: Try it yourself!\nRead this as Jupyter notebook here","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"A Sugeno inference system can be built using the @sugfis macro. The following example shows the macro in action","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"using FuzzyLogic, Plots\n\nfis = @sugfis function tipper(service, food)::tip\n    service := begin\n        domain = 0:10\n        poor = GaussianMF(0.0, 1.5)\n        good = GaussianMF(5.0, 1.5)\n        excellent = GaussianMF(10.0, 1.5)\n    end\n\n    food := begin\n        domain = 0:10\n        rancid = TrapezoidalMF(-2, 0, 1, 3)\n        delicious = TrapezoidalMF(7, 9, 10, 12)\n    end\n\n    tip := begin\n        domain = 0:30\n        cheap = 5.002\n        average = 15\n        generous = 2service, 0.5food, 5.0\n    end\n\n    service == poor || food == rancid --> tip == cheap\n    service == good --> tip == average\n    service == excellent || food == delicious --> tip == generous\nend","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"The result is an object of type SugenoFuzzySystem. This is similar to a Mamdani, with the main difference being in the output definition. In a Sugeno system, the output \"membership functions\" can be:","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"A ConstantSugenoOutput, e.g. average = 15. This means that if the tip is average, then it has constant value 15,\nA LinearSugenoOutput, e.g. generous = 2service, 0.5food, 5.0. This means that if the tip is generous, then its value will be 2service+05food + 50.","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"It is good to highlight that these functions return the value of the output variable and not a membership degree, like in a Mamdani system.","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"The second difference from a Mandani system is in the settings that can be tuned. A Sugeno system only has the following options:","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"and: algorithm to evaluate &&. Must be one of the available Conjuction methods. Default ProdAnd.\nor: algorithm to evaluate ||. Must be one of the available Disjunction methods. Default ProbSumOr","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"The created model can be evaluated the same way of a Mamdani system.","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"fis(service = 2, food = 3)","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"Let's see the plotting of output variables, as it differs from the Mamdani system","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"plot(fis, :tip)","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"As you can see","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"If the membership function is constant, then the plot simply shows a horizontal line at the output value level.\nFor LinearSugenoOutput, the plot is a bar plot, showing for each input variable the corresponding coefficient. This gives a visual indication of how much each input contributes to the output.","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"Like the Mamdani case, we can plot the whole system.","category":"page"},{"location":"tutorials/sugeno/","page":"Build a Sugeno inference system","title":"Build a Sugeno inference system","text":"plot(fis)","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"EditURL = \"https://github.com/lucaferranti/FuzzyLogic.jl/blob/main/docs/src/literate/applications/edge_detector.jl\"","category":"page"},{"location":"applications/edge_detector/#Fuzzy-edge-detector","page":"Edge detection","title":"Fuzzy edge detector","text":"","category":"section"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"This tutorial shows how fuzzy logic can be applied to image processing. It showcases how FuzzyLogic.jl seamlessly composes with common Julia image processing libraries and works out-of-the box.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"This tutorial builds a fuzzy edge detector and it is inspired from the matlab tutorial available here.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"tip: Try it yourself!\nRead this as Jupyter notebook here","category":"page"},{"location":"applications/edge_detector/#Introduction","page":"Edge detection","title":"Introduction","text":"","category":"section"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"We want to design an edge detector. That is, a function that takes an image as input and finds the edges in the image. Our function should produce a new image, with edges highlighted in black and flat areas in white.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"First, let's load the image processing tools we need in this tutorial.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"using TestImages, ImageFiltering, ImageShow, ImageCore\n\nimg = Gray.(testimage(\"house\"))","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"Next, we need to model our problem. When we cross an edge, we have a transition from a clearly delimited area to another. Hence, a pixel is on an edge if moving in its neighborhood we see some change in intensity. If, on the other hand, in the pixel neighborhood there is no change, then it belongs to a flat area.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"Hence, to detect edges we need to compute the gradient of the image at each pixel. This can be done using imgradients from ImageFiltering. This function will return two images, one containg the gradient x-component at each pixel, and one containing the y-component at each pixel. For better visualization, these gradient images are renormalized so that their maximum in absolute value is 1.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"img_y, img_x = imgradients(img, KernelFactors.sobel)\n\nimg_y /= Float64(maximum(abs.(img_y)))\nimg_x /= Float64(maximum(abs.(img_x)))\n\nimg_y","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"img_x","category":"page"},{"location":"applications/edge_detector/#Fuzzy-system-design","page":"Edge detection","title":"Fuzzy system design","text":"","category":"section"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"Now we want to design a fuzzy system that takes as input the gradient x- and y- components and produces as output the intensity of the new image. Particularly, in the output image we want to plot flat areas in white (intensity close to 1) and edges in black (intensity close to 0).","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"Based on our previous discussion, a pixel belongs to a flat area if it has zero gradient (i.e. both x- and y-components are zero). If the gradient is non-zero (either x- or y-component is non-zero) then it belongs to an edge. Hence for our fuzzy edge detector we can use the following rules","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"If the gradient x-component is zero and the gradient y-component is zero, then the output intensity is white.\nIf the gradient x-component is nonzero or the gradient y-compnent is non-zero, then the output intensity is black.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"Hence, for the input, we will use a single membership function zero, which is a sharp Gaussian centered at zero. For the outupt, we have two membership functions, black and white. Recalling that a black pixel means intensity zero and a white pixel intensity one, we will use for black a linear membership function, that decreases from 1 to 0 as the intensity increases. Similarly, for white we can use a linear membership function that increases as the intensity increases.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"We can now implement and visualize our inference system.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"using FuzzyLogic, Plots\n\nfis = @mamfis function edge_detector(dx, dy)::Iout\n    dx := begin\n        domain = -1:1\n        zero = GaussianMF(0.0, 0.1)\n    end\n\n    dy := begin\n        domain = -1:1\n        zero = GaussianMF(0.0, 0.1)\n    end\n\n    Iout := begin\n        domain = 0:1\n        black = LinearMF(0.7, 0.0)\n        white = LinearMF(0.1, 1.0)\n    end\n\n    dx == zero && dy == zero --> Iout == white\n    dx != zero || dy != zero --> Iout == black\nend\nplot(fis)","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"plot(plot(fis, :dx), plot(fis, :Iout), layout = (1, 2))","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"We are now ready to apply our fuzzy edge detector to the input image. We will create a new image Iout and assign to each pixel the intensity value computed with our fuzzy system.","category":"page"},{"location":"applications/edge_detector/","page":"Edge detection","title":"Edge detection","text":"Iout = copy(img)\n\nfor idx in eachindex(Iout)\n    Iout[idx] = fis(dx = img_x[idx], dy = img_y[idx])[:Iout]\nend\nIout","category":"page"},{"location":"contributing/#Contributor's-guide","page":"Contributor's Guide","title":"Contributor's guide","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"First of all, huge thanks for your interest in the package! ✨","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"This page has some tips and guidelines on how to contribute.","category":"page"},{"location":"contributing/#Opening-issues","page":"Contributor's Guide","title":"Opening issues","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"If you spot something strange in the software (something doesn't work or doesn't behave as expected) do not hesitate to open a bug issue.","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"If have an idea of how to make the package better (a new feature, a new piece of documentation, an idea to improve some existing feature), you can open an enhancement issue. ","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"In both cases, try to follow the template, but do not worry if you don't know how to fill something. ","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"If you feel like your issue does not fit any of the above mentioned templates (e.g. you just want to ask something), you can also open a blank issue.","category":"page"},{"location":"contributing/#Collaborative-Practices","page":"Contributor's Guide","title":"Collaborative Practices","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"We follow the ColPrac guide for collaborative practices. New contributors should make sure to read that guide. Below are some additional practices we follow.","category":"page"},{"location":"contributing/#Git-workflow","page":"Contributor's Guide","title":"Git workflow","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"All contributions should go through git branches. If you are not familiar with git practices, you will find some references at the end of this file. Here is a short cheat-sheet.","category":"page"},{"location":"contributing/#Setup","page":"Contributor's Guide","title":"Setup","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"1. Clone the repository","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"git clone https://github.com/lucaferranti/FuzzyLogic.jl.git","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"and enter it with","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"cd FuzzyLogic.jl","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"warning: Warning\nFrom now on, these instructions assume you are in the FuzzyLogic.jl folder","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"2. Fork the repository.","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"3. Add your fork as remote with","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"git remote add $new_remote_name $your_fork_link","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"for example","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"git remote add johndoe https://github.com/johndoe/FuzzyLogic.jl.git","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"after this running git remote -v should produce","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"lucaferranti  https://github.com/lucaferranti/FuzzyLogic.jl.git (fetch)\nlucaferranti  https://github.com/lucaferranti/FuzzyLogic.jl.git (push)\njohndoe        https://github.com/johndoe/FuzzyLogic.jl.git (fetch)\njohndoe       https://github.com/johndoe/FuzzyLogic.jl.git (push)","category":"page"},{"location":"contributing/#Working-with-branches","page":"Contributor's Guide","title":"Working with branches","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"0. Run git branch and check you are on main. If you are not, switch to main via","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"git switch main","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"Next, make sure your local version is up to date by running","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"git fetch origin\ngit merge origin/main","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"1. Create a new branch with","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"git switch -c $new-branch-name","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"3. Now let the fun begin! Fix bugs, add the new features, modify the docs, whatever you do, it's gonna be awesome!","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"4. When you are ready, go to the package main repository (not your fork!) and open a pull request.","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"5. If nothing happens within 7 working days feel free to ping Luca Ferranti (@lucaferranti) every 1-2 days until you get his attention.","category":"page"},{"location":"contributing/#Coding-guideline","page":"Contributor's Guide","title":"Coding guideline","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"The package follows SciMLStyle.\nYou can run the tests locally from the Julia REPL with","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"include(\"test/runtests.jl\")","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"Each test file is stand-alone, hence you can also run individual files, e.g. include(\"test/test_parser.jl\")\nTo make finding tests easier, the test folder structure should (roughly) reflect the structure of the src folder.","category":"page"},{"location":"contributing/#Working-on-the-documentation","page":"Contributor's Guide","title":"Working on the documentation","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"You can build the documentation locally with","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"julia --project=docs docs/make.jl","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"Tutorials and applications are written using Literate.jl, hence if working on those, you should edit the source file under the literate folder and not directly the markdown.","category":"page"},{"location":"contributing/#Further-reading","page":"Contributor's Guide","title":"Further reading","text":"","category":"section"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"Here is a list of useful resources for contributors.","category":"page"},{"location":"contributing/","page":"Contributor's Guide","title":"Contributor's Guide","text":"Making a first Julia pull request <– read this if you are not familiar with the git workflow!\nJuliaReach developers docs\nJulia contributing guideline","category":"page"},{"location":"api/fis/#Inference-Systems","page":"Types","title":"Inference Systems","text":"","category":"section"},{"location":"api/fis/#Mamdani-inference-system","page":"Types","title":"Mamdani inference system","text":"","category":"section"},{"location":"api/fis/","page":"Types","title":"Types","text":"MamdaniFuzzySystem","category":"page"},{"location":"api/fis/#FuzzyLogic.MamdaniFuzzySystem","page":"Types","title":"FuzzyLogic.MamdaniFuzzySystem","text":"struct MamdaniFuzzySystem{And<:FuzzyLogic.AbstractAnd, Or<:FuzzyLogic.AbstractOr, Impl<:FuzzyLogic.AbstractImplication, Aggr<:FuzzyLogic.AbstractAggregator, Defuzz<:FuzzyLogic.AbstractDefuzzifier} <: FuzzyLogic.AbstractFuzzySystem\n\nData structure representing a type-1 Mamdani fuzzy inference system. It can be created using the @mamfis macro. It can be called as a function to evaluate the system at a given input. The inputs should be given as keyword arguments.\n\nname::Symbol: name of the system.\ninputs::Dictionaries.Dictionary{Symbol, FuzzyLogic.Variable}: input variables and corresponding domain.\noutputs::Dictionaries.Dictionary{Symbol, FuzzyLogic.Variable}: output variables and corresponding domain.\nrules::Vector{FuzzyLogic.FuzzyRule}: inference rules.\nand::FuzzyLogic.AbstractAnd: method used to compute conjuction in rules, default MinAnd.\nor::FuzzyLogic.AbstractOr: method used to compute disjunction in rules, default MaxOr.\nimplication::FuzzyLogic.AbstractImplication: method used to compute implication in rules, default MinImplication\naggregator::FuzzyLogic.AbstractAggregator: method used to aggregate fuzzy outputs, default MaxAggregator.\ndefuzzifier::FuzzyLogic.AbstractDefuzzifier: method used to defuzzify the result, default CentroidDefuzzifier.\n\nExtended help\n\nExample\n\nfis = @mamfis function tipper(service, food)::tip\n    service := begin\n      domain = 0:10\n      poor = GaussianMF(0.0, 1.5)\n      good = GaussianMF(5.0, 1.5)\n      excellent = GaussianMF(10.0, 1.5)\n    end\n\n    food := begin\n      domain = 0:10\n      rancid = TrapezoidalMF(-2, 0, 1, 3)\n      delicious = TrapezoidalMF(7, 9, 10, 12)\n    end\n\n    tip := begin\n      domain = 0:30\n      cheap = TriangularMF(0, 5, 10)\n      average = TriangularMF(10, 15, 20)\n      generous = TriangularMF(20, 25, 30)\n    end\n\n    service == poor || food == rancid --> tip == cheap\n    service == good --> tip == average\n    service == excellent || food == delicious --> tip == generous\nend\n\nfis(service=1, food=2)\n\n# output\n\n1-element Dictionaries.Dictionary{Symbol, Float64}\n :tip │ 5.558585929783786\n\n\n\n\n\n","category":"type"},{"location":"api/fis/#Sugeno-inference-system","page":"Types","title":"Sugeno inference system","text":"","category":"section"},{"location":"api/fis/","page":"Types","title":"Types","text":"SugenoFuzzySystem\nConstantSugenoOutput\nLinearSugenoOutput","category":"page"},{"location":"api/fis/#FuzzyLogic.SugenoFuzzySystem","page":"Types","title":"FuzzyLogic.SugenoFuzzySystem","text":"struct SugenoFuzzySystem{And<:FuzzyLogic.AbstractAnd, Or<:FuzzyLogic.AbstractOr} <: FuzzyLogic.AbstractFuzzySystem\n\nData structure representing a type-1 Sugeno fuzzy inference system. It can be created using the @sugfis macro. It can be called as a function to evaluate the system at a given input. The inputs should be given as keyword arguments.\n\nname::Symbol: name of the system.\ninputs::Dictionaries.Dictionary{Symbol, FuzzyLogic.Variable}: input variables and corresponding domain.\noutputs::Dictionaries.Dictionary{Symbol, FuzzyLogic.Variable}: output variables and corresponding domain.\nrules::Vector{FuzzyLogic.FuzzyRule}: inference rules.\nand::FuzzyLogic.AbstractAnd: method used to compute conjuction in rules, default MinAnd.\nor::FuzzyLogic.AbstractOr: method used to compute disjunction in rules, default MaxOr.\n\n\n\n\n\n","category":"type"},{"location":"api/fis/#FuzzyLogic.ConstantSugenoOutput","page":"Types","title":"FuzzyLogic.ConstantSugenoOutput","text":"struct ConstantSugenoOutput{T<:Real} <: FuzzyLogic.AbstractSugenoOutputFunction\n\nRepresents constant output in Sugeno inference systems.\n\nc::Real: value of the constant output.\n\n\n\n\n\n","category":"type"},{"location":"api/fis/#FuzzyLogic.LinearSugenoOutput","page":"Types","title":"FuzzyLogic.LinearSugenoOutput","text":"struct LinearSugenoOutput{T} <: FuzzyLogic.AbstractSugenoOutputFunction\n\nRepresents an output variable that has a first-order polynomial relation on the inputs. Used for Sugeno inference systems.\n\ncoeffs::Dictionaries.Dictionary{Symbol}: coefficients associated with each input variable.\noffset::Any: offset of the output.\n\n\n\n\n\n","category":"type"},{"location":"api/aggregation/#Aggregation-methods","page":"Aggregation methods","title":"Aggregation methods","text":"","category":"section"},{"location":"api/aggregation/","page":"Aggregation methods","title":"Aggregation methods","text":"Modules = [FuzzyLogic]\nFilter = t -> typeof(t) === DataType && t <: FuzzyLogic.AbstractAggregator","category":"page"},{"location":"api/aggregation/#FuzzyLogic.MaxAggregator","page":"Aggregation methods","title":"FuzzyLogic.MaxAggregator","text":"struct MaxAggregator <: FuzzyLogic.AbstractAggregator\n\nAggregator that combines fuzzy rules output by taking their maximum.\n\n\n\n\n\n","category":"type"},{"location":"api/aggregation/#FuzzyLogic.ProbSumAggregator","page":"Aggregation methods","title":"FuzzyLogic.ProbSumAggregator","text":"struct ProbSumAggregator <: FuzzyLogic.AbstractAggregator\n\nAggregator that combines fuzzy rules output by taking their probabilistic sum. See also ProbSumOr.\n\n\n\n\n\n","category":"type"},{"location":"api/defuzzification/#Defuzzification-methods","page":"Defuzzification methods","title":"Defuzzification methods","text":"","category":"section"},{"location":"api/defuzzification/","page":"Defuzzification methods","title":"Defuzzification methods","text":"Modules = [FuzzyLogic]\nFilter = t -> typeof(t) === DataType && t <: FuzzyLogic.AbstractDefuzzifier","category":"page"},{"location":"api/defuzzification/#FuzzyLogic.BisectorDefuzzifier","page":"Defuzzification methods","title":"FuzzyLogic.BisectorDefuzzifier","text":"struct BisectorDefuzzifier <: FuzzyLogic.AbstractDefuzzifier\n\nBisector defuzzifier. Given the aggregated output function f and the output variable domain a b the defuzzified output is the value t  a b that divides the area under f into two equal parts. That is\n\n_a^tf(x)textrmdx = _t^af(x)textrmdx\n\nAlgorithm\n\nThe domain is partitioned into N equal subintervals. For each subinterval endpoint, the left and right area are approximated using the trapezoidal rule. The end point leading to the best approximation is the final result.\n\n\n\n\n\n","category":"type"},{"location":"api/defuzzification/#FuzzyLogic.CentroidDefuzzifier","page":"Defuzzification methods","title":"FuzzyLogic.CentroidDefuzzifier","text":"struct CentroidDefuzzifier <: FuzzyLogic.AbstractDefuzzifier\n\nCentroid defuzzifier. Given the aggregated output function f and the output variable domain a b the defuzzified output is the centroid computed as\n\nfrac_a^bxf(x)textrmdx_a^bf(x)textrmdx\n\nAlgorithm\n\nThe integrals are computed numerically using the trapezoidal rule.\n\n\n\n\n\n","category":"type"},{"location":"changelog/#Release-Notes","page":"Release notes","title":"Release Notes","text":"","category":"section"},{"location":"changelog/","page":"Release notes","title":"Release notes","text":"The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.","category":"page"},{"location":"changelog/#v0.1.0-–-2023-01-10","page":"Release notes","title":"v0.1.0 – 2023-01-10","text":"","category":"section"},{"location":"changelog/","page":"Release notes","title":"Release notes","text":"view release on GitHub","category":"page"},{"location":"changelog/","page":"Release notes","title":"Release notes","text":"initial public release","category":"page"},{"location":"changelog/","page":"Release notes","title":"Release notes","text":"initial domain specific language design and parser\ninitial membership functions: triangular, trapezoidal, gaussian, bell, linear, sigmoid, sum of sigmoids, product of sigmoids, s-shaped, z-shaped, pi-shaped.\ninitial implementation of Mamdani and Sugeno inference systems (type 1)\nmin, prod and Łukasiewicz t-norms with corresponding conorms\nmin and prod implication\nmax and probabilistic sum aggregation method\ncentroid and bisector defuzzifier\nlinear and constant output for Sugeno\ninitial plotting functionalities\nplotting variables and membership functions\nplotting rules of fuzzy inference system","category":"page"},{"location":"api/logical/#Logical-connectives","page":"Logical connectives","title":"Logical connectives","text":"","category":"section"},{"location":"api/logical/#Conjuction-methods","page":"Logical connectives","title":"Conjuction methods","text":"","category":"section"},{"location":"api/logical/","page":"Logical connectives","title":"Logical connectives","text":"Modules = [FuzzyLogic]\nFilter = t -> typeof(t) === DataType && t <: FuzzyLogic.AbstractAnd","category":"page"},{"location":"api/logical/#FuzzyLogic.MinAnd","page":"Logical connectives","title":"FuzzyLogic.MinAnd","text":"struct MinAnd <: FuzzyLogic.AbstractAnd\n\nMinimum T-norm defining conjuction as A  B = min(A B).\n\n\n\n\n\n","category":"type"},{"location":"api/logical/#FuzzyLogic.ProdAnd","page":"Logical connectives","title":"FuzzyLogic.ProdAnd","text":"struct ProdAnd <: FuzzyLogic.AbstractAnd\n\nProduct T-norm defining conjuction as A  B = AB.\n\n\n\n\n\n","category":"type"},{"location":"api/logical/#Disjunction-methods","page":"Logical connectives","title":"Disjunction methods","text":"","category":"section"},{"location":"api/logical/","page":"Logical connectives","title":"Logical connectives","text":"Modules = [FuzzyLogic]\nFilter = t -> typeof(t) === DataType && t <: FuzzyLogic.AbstractOr","category":"page"},{"location":"api/logical/#FuzzyLogic.MaxOr","page":"Logical connectives","title":"FuzzyLogic.MaxOr","text":"struct MaxOr <: FuzzyLogic.AbstractOr\n\nMaximum S-norm defining disjunction as A  B = max(A B).\n\n\n\n\n\n","category":"type"},{"location":"api/logical/#FuzzyLogic.ProbSumOr","page":"Logical connectives","title":"FuzzyLogic.ProbSumOr","text":"struct ProbSumOr <: FuzzyLogic.AbstractOr\n\nProbabilistic sum S-norm defining disjunction as A  B = A + B - AB.\n\n\n\n\n\n","category":"type"},{"location":"api/logical/#Implication-methods","page":"Logical connectives","title":"Implication methods","text":"","category":"section"},{"location":"api/logical/","page":"Logical connectives","title":"Logical connectives","text":"Modules = [FuzzyLogic]\nFilter = t -> typeof(t) === DataType && t <: FuzzyLogic.AbstractImplication","category":"page"},{"location":"api/logical/#FuzzyLogic.MinImplication","page":"Logical connectives","title":"FuzzyLogic.MinImplication","text":"struct MinImplication <: FuzzyLogic.AbstractImplication\n\nMinimum implication defined as A  B = min(A B).\n\n\n\n\n\n","category":"type"},{"location":"api/logical/#FuzzyLogic.ProdImplication","page":"Logical connectives","title":"FuzzyLogic.ProdImplication","text":"struct ProdImplication <: FuzzyLogic.AbstractImplication\n\nProduct implication defined as A  B = AB.\n\n\n\n\n\n","category":"type"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"EditURL = \"https://github.com/lucaferranti/FuzzyLogic.jl/blob/main/docs/src/literate/tutorials/mamdani.jl\"","category":"page"},{"location":"tutorials/mamdani/#Build-a-Mamdani-inference-system","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"","category":"section"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"This tutorial gives a general overiew of FuzzyLogic.jl basic functionalities by showing how to implement and use a type-1 Mamdani inference system.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"tip: Try it yourself!\nRead this as Jupyter notebook here","category":"page"},{"location":"tutorials/mamdani/#Setup","page":"Build a Mamdani inference system","title":"Setup","text":"","category":"section"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"To follow the tutorial, you should have installed Julia.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"Next, you can install FuzzyLogic.jl with","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"using Pkg; Pkg.add(\"FuzzyLogic\")","category":"page"},{"location":"tutorials/mamdani/#Building-the-inference-system","page":"Build a Mamdani inference system","title":"Building the inference system","text":"","category":"section"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"First, we need to load the library.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"using FuzzyLogic","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The Mamdani inference system can be constructed with the @mamfis macro. We will first give a full example and then explain every step.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"fis = @mamfis function tipper(service, food)::tip\n    service := begin\n        domain = 0:10\n        poor = GaussianMF(0.0, 1.5)\n        good = GaussianMF(5.0, 1.5)\n        excellent = GaussianMF(10.0, 1.5)\n    end\n\n    food := begin\n        domain = 0:10\n        rancid = TrapezoidalMF(-2, 0, 1, 3)\n        delicious = TrapezoidalMF(7, 9, 10, 12)\n    end\n\n    tip := begin\n        domain = 0:30\n        cheap = TriangularMF(0, 5, 10)\n        average = TriangularMF(10, 15, 20)\n        generous = TriangularMF(20, 25, 30)\n    end\n\n    and = ProdAnd\n    or = ProbSumOr\n    implication = ProdImplication\n\n    service == poor || food == rancid --> tip == cheap\n    service == good --> tip == average\n    service == excellent || food == delicious --> tip == generous\n\n    aggregator = ProbSumAggregator\n    defuzzifier = BisectorDefuzzifier\nend","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"As you can see, defining a fuzzy inference system with @mamfis looks a lot like writing Julia code. Let us now take a closer look at the components. The first line","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"function tipper(service, food)::tip","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"specifies the basic properties of the system, particularly","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"the function name tipper will be the name of the system\nthe input arguments service, food represent the input variables of the system\nthe output type annotation ::tip represents the output variable of the system. If the system has multiple outputs, they should be enclosed in braces, i.e. ::{tip1, tip2}","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The next block is the variable specifications block, identified by the := operator. This block is used to specify the domain and membership functions of a variable, for example","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"service := begin\n    domain = 0:10\n    poor = GaussianMF(0.0, 1.5)\n    good = GaussianMF(5.0, 1.5)\n    excellent = GaussianMF(10.0, 1.5)\nend","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The order of the statements inside the begin ... end block is irrelevant.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The line domain = 0:10 sets the domain of the variable to the interval 0 10. Note that setting the domain is required\nThe other lines specify the membership functions of the variable.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"For example, poor = GaussianMF(0.0, 1.5) means that the variable has a Gaussian membership function called poor with mean 00 and stanrdard devisation 15. A complete list of supported dmembership functions and their parameters can be found in the Membership functions section of the API documentation.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"Next, we describe rule blocks. A fuzzy relation such as service is poor is described with the == operator, for example service == poor. The premise i.e. left-hand side, of the rule can be any logical proposition connecting fuzzy relations with the && (AND) and || (OR) operators. The consequence i.e. right-hand side, of the rule is a fuzzy relation for the output variable. Premise and consequence are connected with the --> operator. For example, the rule","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"service == poor || food == rancid --> tip == cheap","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"reads If the service is poor or the food is rancid, then the tip is cheap.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"Note that in the premise can be any logical proposition, you can have both && and  || connectives and you can also have nested propositions. For example, the following is a valid rule","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"service == poor || food = rancid && service == good","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The connectives follow Julia precedence rules, so && binds stronger than ||.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"If you have multiple outputs, then the consequence should be a tuple, for example","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"service == poor || food == rancid --> (tip1 == cheap, tip2 == cheap)","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"Finally, assignment lines like","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"and = ProdAnd","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"are used to set the settings of the inference system. For a Mamdani inference system, the following settings are available","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"and: algorithm to evaluate &&. Must be one of the available Conjuction methods. Default MinAnd.\nor: algorithm to evaluate ||. Must be one of the available Disjunction methods. Default MaxOr\nimplication: algorithm to evalute -->. Must be one of the available Implication methods. Default MinImplication.\naggregato: algorithm to perform outputs aggregation. Must be one of the available Aggregation methods. Default MaxAggregator.\ndefuzzifier: algorithm to perform defuzzification. Must be one of the available Defuzzification methods. Default CentroidDefuzzifier.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"If one of the above settings is not specified, the corresponding default value is used.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"Some of the above settings may have internal parameters. For example, CentroidDefuzzifier has an integer parameter N, the number of points used to perform numerical integration. If the parameter is not specified, as in defuzzifier = CentroidDefuzzifier, then the default value for N can be used. This parameter can be overwritten with custom values, for example","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"defuzzifier = CentroidDefuzzifier(50)","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"will use 50 as value of N instead of the default one (100 in this case).","category":"page"},{"location":"tutorials/mamdani/#Visualization","page":"Build a Mamdani inference system","title":"Visualization","text":"","category":"section"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The library offers tools to visualize your fuzzy inference system. This requires installing and importing the Plots.jl library.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"using Plots","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The membership functions of a given variable can be plotted by calling plot(fis, varname), where fis is the inference system you created and varname is the name of the variable you want to visualize, given as a symbol. For example,","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"plot(fis, :service)","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"Giving only the inference system object to plot will plot the inference rules, one per line.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"plot(fis)","category":"page"},{"location":"tutorials/mamdani/#Inference","page":"Build a Mamdani inference system","title":"Inference","text":"","category":"section"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"To perform inference, you can call the above constructed inference system as a function, passing th input values as parameters. Note that the system does not accept positional arguments, but inputs should be passed as name-value pairs. For example","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"res = fis(service = 2, food = 3)","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"The result is a Dictionary containing the output value corresponding to each output variable. The value of a specific output variable can be extracted using the variable name as key.","category":"page"},{"location":"tutorials/mamdani/","page":"Build a Mamdani inference system","title":"Build a Mamdani inference system","text":"res[:tip]","category":"page"},{"location":"#FuzzyLogic.jl","page":"Home","title":"FuzzyLogic.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Info Build status Documentation Contributing\n(Image: version) (Image: CI Status) (Image: Stable docs) (Image: contributing guidelines)\n(Image: Licese: MIT) (Image: Coverage) (Image: Dev docs) (Image: SciML Code Style)\n(Image: downloads) (Image: PkgEval)  (Image: gitter-chat)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia library for fuzzy inference.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, open a Julia session and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"FuzzyLogic\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"the package can then be loaded with","category":"page"},{"location":"","page":"Home","title":"Home","text":"using FuzzyLogic","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Rich! Mamdani and Sugeno Type-1 inference systems, several membership functions and algoritms options available.\nExpressive! Clear Domain Specific Language to write your model as human readable Julia code\nProductive! Several visualization tools to help debug and tune your model.","category":"page"},{"location":"#Quickstart-example","page":"Home","title":"Quickstart example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fis = @mamfis function tipper(service, food)::tip\n    service := begin\n      domain = 0:10\n      poor = GaussianMF(0.0, 1.5)\n      good = GaussianMF(5.0, 1.5)\n      excellent = GaussianMF(10.0, 1.5)\n    end\n\n    food := begin\n      domain = 0:10\n      rancid = TrapezoidalMF(-2, 0, 1, 3)\n      delicious = TrapezoidalMF(7, 9, 10, 12)\n    end\n\n    tip := begin\n      domain = 0:30\n      cheap = TriangularMF(0, 5, 10)\n      average = TriangularMF(10, 15, 20)\n      generous = TriangularMF(20, 25, 30)\n    end\n\n    service == poor || food == rancid --> tip == cheap\n    service == good --> tip == average\n    service == excellent || food == delicious --> tip == generous\nend\n\nfis(service=1, food=2)","category":"page"},{"location":"#Copyright","page":"Home","title":"Copyright","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2022 Luca Ferranti","category":"page"},{"location":"api/readwrite/#Reading-/-writing-functionalities","page":"Reading/Writing","title":"Reading / writing functionalities","text":"","category":"section"},{"location":"api/readwrite/#Parse-Julia-code","page":"Reading/Writing","title":"Parse Julia code","text":"","category":"section"},{"location":"api/readwrite/","page":"Reading/Writing","title":"Reading/Writing","text":"@mamfis\n@sugfis","category":"page"},{"location":"api/readwrite/#FuzzyLogic.@mamfis","page":"Reading/Writing","title":"FuzzyLogic.@mamfis","text":"Parse julia code into a MamdaniFuzzySystem. See extended help for an example.\n\nExtended help\n\nExample\n\nfis = @mamfis function tipper(service, food)::tip\n    service := begin\n      domain = 0:10\n      poor = GaussianMF(0.0, 1.5)\n      good = GaussianMF(5.0, 1.5)\n      excellent = GaussianMF(10.0, 1.5)\n    end\n\n    food := begin\n      domain = 0:10\n      rancid = TrapezoidalMF(-2, 0, 1, 3)\n      delicious = TrapezoidalMF(7, 9, 10, 12)\n    end\n\n    tip := begin\n      domain = 0:30\n      cheap = TriangularMF(0, 5, 10)\n      average = TriangularMF(10, 15, 20)\n      generous = TriangularMF(20, 25, 30)\n    end\n\n    and = ProdAnd\n    or = ProbSumOr\n    implication = ProdImplication\n\n    service == poor || food == rancid --> tip == cheap\n    service == good --> tip == average\n    service == excellent || food == delicious --> tip == generous\n\n    aggregator = ProbSumAggregator\n    defuzzifier = BisectorDefuzzifier\nend\n\n# output\n\ntipper\n\nInputs:\n-------\nservice ∈ [0, 10] with membership functions:\n    poor = GaussianMF{Float64}(0.0, 1.5)\n    good = GaussianMF{Float64}(5.0, 1.5)\n    excellent = GaussianMF{Float64}(10.0, 1.5)\n\nfood ∈ [0, 10] with membership functions:\n    rancid = TrapezoidalMF{Int64}(-2, 0, 1, 3)\n    delicious = TrapezoidalMF{Int64}(7, 9, 10, 12)\n\n\nOutputs:\n--------\ntip ∈ [0, 30] with membership functions:\n    cheap = TriangularMF{Int64}(0, 5, 10)\n    average = TriangularMF{Int64}(10, 15, 20)\n    generous = TriangularMF{Int64}(20, 25, 30)\n\n\nInference rules:\n----------------\n(service is poor ∨ food is rancid) --> tip is cheap\nservice is good --> tip is average\n(service is excellent ∨ food is delicious) --> tip is generous\n\n\nSettings:\n---------\n- ProdAnd()\n- ProbSumOr()\n- ProdImplication()\n- ProbSumAggregator()\n- BisectorDefuzzifier(100)\n\n\n\n\n\n","category":"macro"},{"location":"api/readwrite/#FuzzyLogic.@sugfis","page":"Reading/Writing","title":"FuzzyLogic.@sugfis","text":"Parse julia code into a SugenoFuzzySystem. See extended help for an example.\n\nExtended help\n\nExample\n\nfis = @sugfis function tipper(service, food)::tip\n    service := begin\n        domain = 0:10\n        poor = GaussianMF(0.0, 1.5)\n        good = GaussianMF(5.0, 1.5)\n        excellent = GaussianMF(10.0, 1.5)\n    end\n\n    food := begin\n        domain = 0:10\n        rancid = TrapezoidalMF(-2, 0, 1, 3)\n        delicious = TrapezoidalMF(7, 9, 10, 12)\n    end\n\n    tip := begin\n        domain = 0:30\n        cheap = 0\n        average = food\n        generous = 2service, food, -2\n    end\n\n    service == poor && food == rancid --> tip == cheap\n    service == good --> tip == average\n    service == excellent || food == delicious --> tip == generous\nend\n\n# output\n\ntipper\n\nInputs:\n-------\nservice ∈ [0, 10] with membership functions:\n    poor = GaussianMF{Float64}(0.0, 1.5)\n    good = GaussianMF{Float64}(5.0, 1.5)\n    excellent = GaussianMF{Float64}(10.0, 1.5)\n\nfood ∈ [0, 10] with membership functions:\n    rancid = TrapezoidalMF{Int64}(-2, 0, 1, 3)\n    delicious = TrapezoidalMF{Int64}(7, 9, 10, 12)\n\n\nOutputs:\n--------\ntip ∈ [0, 30] with membership functions:\n    cheap = 0\n    average = food\n    generous = 2service + food - 2\n\n\nInference rules:\n----------------\n(service is poor ∧ food is rancid) --> tip is cheap\nservice is good --> tip is average\n(service is excellent ∨ food is delicious) --> tip is generous\n\n\nSettings:\n---------\n- ProdAnd()\n- ProbSumOr()\n\n\n\n\n\n","category":"macro"}]
}
